1.In Python, what is the difference between a built-in function and a user-defined function? Provide an example of each.

Ans.

Built-in Function:
Built-in functions are pre-defined functions that are available in Python's standard library.

Example:-

# Using the built-in function 'print'
print("Hello, world!")

User-defined Function:
User-defined functions are functions that are created by the programmers to perform specific tasks.

Example:-

# Defining a user-defined function 'add_numbers'
def add_numbers(a, b):
    return a + b

# Calling the user-defined function 'add_numbers'
result = add_numbers(5, 3)
print(result)  # Output: 8


2.How can you pass arguments to a function in Python? Explain the difference between positional arguments and keyword arguments.

Ans.

Positional Arguments:
Positional arguments are passed to a function based on their position or order.

Example:-

def greet(name, age):
    print(f"Hello, {name}! You are {age} years old.")
greet("Alice", 25)

Keyword Arguments:
Keyword arguments are passed to a function using the syntax parameter_name=value. Instead of relying on the order of arguments, keyword arguments explicitly specify which parameter each argument corresponds to. 

Example:-

def greet(name, age):
    print(f"Hello, {name}! You are {age} years old.")
greet(age=25, name="Alice")


3.What is the purpose of the return statement in a function? Can a function have multiple return statements? Explain with an example.

Ans.

The return statement in a function serves the purpose of specifying the value(s) that the function should return when it is called. It allows a function to compute a result and pass it back to the caller for further use or processing.
Yes, a function can have multiple return statements. The function can have conditional logic or different execution paths that lead to different return statements, depending on certain conditions or scenarios. When a return statement is executed, it immediately ends the function and returns the specified value.

Example:-

def divide_numbers(a, b):
    if b == 0:
        return "Error: Cannot divide by zero."  # Return statement for error case
    else:
        result = a / b
        return result  # Return statement for successful division
# Calling the function
print(divide_numbers(10, 2))   # Output: 5.0
print(divide_numbers(8, 0))    # Output: Error: Cannot divide by zero.


4. What are lambda functions in Python? How are they different from regular functions? Provide an example where a lambda function can be useful.

Ans.

n Python, lambda functions, also known as anonymous functions, are small, inline functions that can be defined without a name. They are typically used for simple and one-time operations. Lambda functions are created using the lambda keyword.
syntax:-lambda arguments: expression
Lambda functions are different from regular functions.
Lambda functions do not require a function name. They are defined on the spot and can be used immediately.
Lambda functions are often used for short and simple operations. They are written in a single line.
Lambda functions are limited in functionality compared to regular functions.

Example:-

# Sorting a list of tuples based on the second element of each tuple
data = [(4, 2), (1, 7), (3, 5), (2, 9)]
sorted_data = sorted(data, key=lambda x: x[1])
print(sorted_data) #outpur--[(4, 2), (3, 5), (1, 7), (2, 9)]

5. How does the concept of "scope" apply to functions in Python? Explain the difference between localscope and global scope.

Ans.

The concept of "scope" in Python determines the accessibility and visibility of variables. Variables defined inside a function have local scope, accessible only within the function. Global scope refers to variables accessible throughout the entire program. Local scope takes precedence over global scope when accessing variables with the same name.

Example:-

x = 10  # Global variable
def my_function():
    y = 20  # Local variable
    print(x)  # Accessing the global variable
    print(y)  # Accessing the local variable
my_function()
print(x)  # Accessing the global variable outside the function
#print(y)  # This line will raise an error since 'y' is not accessible outside the function

6. How can you use the "return" statement in a Python function to return multiple values?

Ans.

In Python, you can use the return statement in a function to return multiple values by separating them with commas. When multiple values are returned, they are bundled together into a tuple.
Example:-
def get_person_details():
    name = "Alice"
    age = 25
    city = "New York"
    return name, age, city
person_name, person_age, person_city = get_person_details()
print(person_name)   # Output: Alice
print(person_age)    # Output: 25
print(person_city)   # Output: New York

7. What is the difference between the "pass by value" and "pass by reference" concepts when it comes to function arguments in Python?

Ans.

Pass by assignment (or pass by value):
When a function is called with arguments, a new assignment is made within the function's local scope. This means that the value of the argument is assigned to a new local variable, which is distinct from the variable used in the calling code. Any modifications to the local variable within the function do not affect the original variable in the calling code.

Example:-

def update_value(num):
    num += 10
x = 5
update_value(x)
print(x)  # Output: 5 (unchanged)

Passing references (or pass by reference):
In Python, when objects are passed as arguments to functions, they are actually passed by their references. This means that the reference to the object is copied, not the object itself. If modifications are made to the object using that reference, the changes will be reflected in the original object.
Example:-
def update_list(lst):
    lst.append(4)
my_list = [1, 2, 3]
update_list(my_list)
print(my_list)  # Output: [1, 2, 3, 4]

8. Create a function that can intake integer or decimal value and do following operations:
a. Logarithmic function (log x)
b. Exponential function (exp(x))
c. Power function with base 2 (2x)
d. Square root

Ana.

import math
def math_operations(x):
    return{
        "logarithm": math.log(x),
        "exponential": math.exp(x),
        "power": math.pow(2, x),
        "square_root": math.sqrt(x)
     }

result = math_operations(4)
print(result["logarithm"])       # Output: 1.3862943611198906
print(result["exponential"])     # Output: 54.598150033144236
print(result["power"])           # Output: 16.0
print(result["square_root"])     # Output: 2.0


9. Create a function that takes a full name as an argument and returns first name and last name.

Ans.

def first_last_name(name):
    names1 = name.split()
    first_name = names1[0]
    last_name = names1[-1]
    return first_name, last_name
    
name = "N Nirmal"
first_name, last_name = first_last_name(name)

print(first_name)  # Output: N
print(last_name)   # Output: Nirmal


Thank you***



